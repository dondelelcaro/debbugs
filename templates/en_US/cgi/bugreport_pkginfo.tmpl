<div class="pkginfo">
  <p>{if (keys %package > 1) { q(Packages)} else {q(Package)}}:
     {join(q(, ),package_links(package => [map {$_->{package}} grep {!$_->{is_source}} values %package],
                               source  => [map {$_->{source} } grep { $_->{is_source}} values %package],
                               class => q(submitter),
                              )
          )};
{my $output ='';
 for my $package (values %package) {
     $output .= q(Maintainer for ).package_links($package->{is_source}?(source=>$package->{source}):(package=>$package->{package})).qq( is ).
                package_links(maintainer => $package->{maintainer}).qq(; );
     if (exists $package->{source} and not $package->{is_source}) {
     	$output .= q(Source for ).package_links(package=>$package->{package}).qq( is ).
        	    package_links(source => $package->{source}).
		    q{ (<a href="https://tracker.debian.org/pkg/}.html_escape(uri_escape($package->{source})).qq{">PTS</a>, }.
		    q{<a href="https://buildd.debian.org/}.html_escape(uri_escape($package->{source})).qq{">buildd</a>, }.
		    q{<a href="https://qa.debian.org/popcon.php?package=}.html_escape(uri_escape($package->{source})).qq{">popcon</a>)}.
		    qq(. );
     }
 }
 $output;
}</p>
{ my $output = '';
  if (keys %affects) {
      $output .= q(<p>Affects: ).
          join(q(, ),
               package_links(package => [map {$_->{package}} grep {!$_->{is_source}} values %affects],
                             source  => [map {$_->{source} } grep { $_->{is_source}} values %affects],
                             class => q(submitter),
                            )
              ).q(</p>);
  }
  $output;
}
</div>
